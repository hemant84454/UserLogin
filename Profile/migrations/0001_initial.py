# Generated by Django 3.0.4 on 2020-03-20 06:12

import Profile.managers
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('firstName', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(message='Invalid Name', regex="^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$")])),
                ('lastName', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(message='Invalid Name', regex="^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$")])),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid Email address', regex="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")])),
                ('otp', models.CharField(blank=True, max_length=4, null=True)),
                ('password', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='\n#   must contains one digit from 0-9\n#   must contains one lowercase characters\n #   must contains one uppercase characters\n #   must contains one special symbols in the list "@#$%"\n #        length at least 6 characters and maximum of 20\t\n\n', regex='((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})')])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=True)),
                ('is_otpverified', models.BooleanField(default=False)),
                ('otp_verify', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', Profile.managers.MYUserManager()),
            ],
        ),
    ]
